{"ts":1351447542980,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\nvar passport = require('passport')\n  , util = require('util')\n  , BadRequestError = require('./errors/badrequesterror');\n\n\n/**\n * `Strategy` constructor.\n *\n * The local authentication strategy authenticates requests based on the\n * credentials submitted through an HTML-based login form.\n *\n * Applications must supply a `verify` callback which accepts `username` and\n * `password` credentials, and then calls the `done` callback supplying a\n * `user`, which should be set to `false` if the credentials are not valid.\n * If an exception occured, `err` should be set.\n *\n * Optionally, `options` can be used to change the fields in which the\n * credentials are found.\n *\n * Options:\n *   - `usernameField`  field name where the username is found, defaults to _username_\n *   - `passwordField`  field name where the password is found, defaults to _password_\n *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new LocalStrategy(\n *       function(username, password, done) {\n *         User.findOne({ username: username, password: password }, function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n  if (!verify) throw new Error('local authentication strategy requires a verify function');\n  \n  this._usernameField = options.usernameField || 'username';\n  this._passwordField = options.passwordField || 'password';\n  \n  passport.Strategy.call(this);\n  this.name = 'local';\n  this._verify = verify;\n  this._passReqToCallback = options.passReqToCallback;\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n/**\n * Authenticate request based on the contents of a form submission.\n *\n * @param {Object} req\n * @api protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);\n  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);\n  \n  if (!username || !password) {\n    return this.fail(new BadRequestError(options.badRequestMessage || 'Missing credentials'));\n  }\n  \n  var self = this;\n  \n  function verified(err, user, info) {\n    if (err) { return self.error(err); }\n    if (!user) { return self.fail(info); }\n    self.success(user, info);\n  }\n  \n  if (self._passReqToCallback) {\n    this._verify(req, username, password, verified);\n  } else {\n    this._verify(username, password, verified);\n  }\n  \n  function lookup(obj, field) {\n    if (!obj) { return null; }\n    var chain = field.split(']').join('').split('[');\n    for (var i = 0, len = chain.length; i < len; i++) {\n      var prop = obj[chain[i]];\n      if (typeof(prop) === 'undefined') { return null; }\n      if (typeof(prop) !== 'object') { return prop; }\n      obj = prop;\n    }\n    return null;\n  }\n}\n\n\n/**\n * Expose `Strategy`.\n */ \nmodule.exports = Strategy;\n"]],"start1":0,"start2":0,"length1":0,"length2":3202}]],"length":3202}
